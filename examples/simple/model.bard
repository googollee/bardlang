package main

type SchemaField struct {
  name string
  type string
  size uint
}

func Schema(T comp type) value {
  let schema_fields = [@fields(T).len()]@Function{}

  for let (i, field) = @fields(T).with_index() {
    schema_fields[i] = @Function{
      .name: field.name(),
      .output: SchemaField,
    }
  }

  return @CreateInterface(schema_fields)
}

func SchemaValue(T comp type) value{
  let schema_funcs = [@fields(T).len()]@Function{}

  for let (i, field) = @fields(T).with_index() {
    schema_funcs[i] = @Function{
      .name: field.name(),
      .output: SchemaField,
    }
  }

  ret := @CreateStruct(schema_fields)

  for let field = @fields(T) {
    let field = @StructFieldWithName(ret, field.name())
    field = {
      .name: field.name(),
      .type: field.type(),
      .size: field.size(),
    }
  }

  return ret
}

type User struct {
  name string
  age int
}

def query() -> Result[own &User] {
  ret := @new(User)
  if err := db.Where(User::name().eq("name"), User::age().gt(18)).first(&mut ret); err != nil {
    return ERR(err)
  }
  return OK(ret)
}
