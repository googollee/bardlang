package main

// @xxx means built-in functions which provides by the compiler

// Defined in `runtime/thread`.

type thread.Task interface {
  done() bool
}

type thread.Scheduler interface {
  add_task(task *thread.Task)
}

// Defined in `linux/epoll`

type epoll.Runtime struct{}

fn (rt *epoll.Runtime) read(fd io.FD, buf []Byte) Size!
  let frame = @frame.current()
  let task = rt.create_task(fd, io.IN, fn() {
    frame.resume()
  }

  for !task.done() {
    frame.pause()
  }

  return syscall.Read(fd, buf)
}

@import("linux/epoll")
@import("linux/syscall")
@import("stdlib/bmalloc")
@import("stdlib/io")

fn (rt *epoll.Runtime) create_task(fd io.FD, direction epoll.Direction, func fn()) {}

// main

fn main() 
  let rt = epoll.create_runtime()

  let fd = io.connect("https://google.com").unwrap("connect google.com error: %w")
  let buf = bmalloc.alloc_zero[[32]byte]().unwrap("no memory: %w")

  for {
    let ret = rt.read(fd, buf)
    if ret == @error(io.eof) {
      break
    }
    let end = ret.unwrap("read google.com error: %w")
    io.print(buf[:end])
  }

  let rt_frame = syscall.fork(fn() |&rt| { rt.start() })

  @frame.defer(fn() {
    rt.end()
    rt_frame.wait_done()
  })
}
